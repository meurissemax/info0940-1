From 5a33a9abafe1031e4017beb9eee13aac54f2bf83 Mon Sep 17 00:00:00 2001
From: Valentin <valentin.vermeylen@student.uliege.be>
Date: Sat, 11 Apr 2020 10:12:40 +0200
Subject: [PATCH 1/2] First tries

---
 Makefile                               |  2 +-
 arch/x86/entry/syscalls/syscall_32.tbl |  3 +++
 arch/x86/entry/syscalls/syscall_64.tbl |  1 +
 hello/Makefile                         |  1 +
 hello/hello.c                          |  7 ++++++
 include/linux/syscalls.h               |  3 +++
 kvs/Makefile                           |  1 +
 kvs/kvs.c                              | 45 ++++++++++++++++++++++++++++++++++
 kvs/kvs.h                              | 19 ++++++++++++++
 9 files changed, 81 insertions(+), 1 deletion(-)
 create mode 100644 hello/Makefile
 create mode 100644 hello/hello.c
 create mode 100644 kvs/Makefile
 create mode 100644 kvs/kvs.c
 create mode 100644 kvs/kvs.h

diff --git a/Makefile b/Makefile
index c8b8e90..efe46e6 100644
--- a/Makefile
+++ b/Makefile
@@ -940,7 +940,7 @@ endif
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ kvs/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_32.tbl b/arch/x86/entry/syscalls/syscall_32.tbl
index 448ac21..76dfc91 100644
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@ -391,3 +391,6 @@
 382	i386	pkey_free		sys_pkey_free
 383	i386	statx			sys_statx
 384	i386	arch_prctl		sys_arch_prctl			compat_sys_arch_prctl
+385 i386    kvs_insert      kvs_insert
+386 i386    kvs_search      kvs_search
+387 i386    kvs_delete      kvs_delete
\ No newline at end of file
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 5aef183..1ba1e1e 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -380,3 +380,4 @@
 545	x32	execveat		compat_sys_execveat/ptregs
 546	x32	preadv2			compat_sys_preadv64v2
 547	x32	pwritev2		compat_sys_pwritev64v2
+548 64  hello           sys_hello
\ No newline at end of file
diff --git a/hello/Makefile b/hello/Makefile
new file mode 100644
index 0000000..fc9e7b9
--- /dev/null
+++ b/hello/Makefile
@@ -0,0 +1 @@
+obj-y := hello.o
\ No newline at end of file
diff --git a/hello/hello.c b/hello/hello.c
new file mode 100644
index 0000000..396f66e
--- /dev/null
+++ b/hello/hello.c
@@ -0,0 +1,7 @@
+#include <linux/kernel.h>
+
+asmlinkage long sys_hello(void)
+{
+        printk("Hello world\n");
+        return 0;
+}
\ No newline at end of file
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a78186d..319cf45 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -941,4 +941,7 @@ asmlinkage long sys_pkey_free(int pkey);
 asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,
 			  unsigned mask, struct statx __user *buffer);
 
+asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size_t vallen);
+asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen);
+asmlinkage long kvs_delete(const char *key, size_t keylen);
 #endif
diff --git a/kvs/Makefile b/kvs/Makefile
new file mode 100644
index 0000000..a280249
--- /dev/null
+++ b/kvs/Makefile
@@ -0,0 +1 @@
+obj-y := kvs.o
\ No newline at end of file
diff --git a/kvs/kvs.c b/kvs/kvs.c
new file mode 100644
index 0000000..4e5375d
--- /dev/null
+++ b/kvs/kvs.c
@@ -0,0 +1,45 @@
+#include <linux/slab.h>
+#include "kvs.h"
+
+asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size_t vallen){
+
+    struct Node* addition = (struct Node*) kmalloc(sizeof(struct Node),GFP_KERNEL);
+    addition->key = (char*) kmalloc(sizeof(key), GFP_KERNEL);
+    addition->val = (char*) kmalloc(sizeof(val), GFP_KERNEL);
+
+    addition->key = key;
+    addition->val = val;
+    addition->keylen = keylen;
+    addition->vallen = vallen;
+
+    INIT_LIST_HEAD(&addition->kvsList);
+
+    list_add(&addition->kvsList, &kvsHead);
+
+    struct list_head* pos = NULL;
+    struct Node* datastruct = NULL;
+    list_for_each(pos, &kvsHead){
+        datastruct = list_entry(pos, struct Node, kvsList);
+        printk("Key : %s\n", datastruct->key);
+    }
+    return 1;
+}
+
+asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen) {
+
+    printk("kvs_search\n");
+    return 1;
+}
+
+asmlinkage long kvs_delete(const char *key, size_t keylen) {
+
+    printk("kvs_delete\n");
+    return 1;
+}
+
+/* Does not work.
+*   Function used to initialize the global variable representing the head of the linked list
+
+void __init kvs_init(void) {
+    LIST_HEAD(kvsHead);
+}*/
\ No newline at end of file
diff --git a/kvs/kvs.h b/kvs/kvs.h
new file mode 100644
index 0000000..5237de2
--- /dev/null
+++ b/kvs/kvs.h
@@ -0,0 +1,19 @@
+#include <linux/list.h>
+
+static LIST_HEAD(kvsHead);
+
+struct Node {
+    const char* key;
+    const char* val;
+    size_t keylen;
+    size_t vallen;
+
+    struct list_head kvsList;
+};
+
+
+asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size_t vallen);
+
+asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen);
+
+asmlinkage long kvs_delete(const char *key, size_t keylen);
\ No newline at end of file
-- 
2.7.4

