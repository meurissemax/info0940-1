From a421e28bcbe76b6aade19a77de1d42418406f0fd Mon Sep 17 00:00:00 2001
From: Valentin <valentin.vermeylen@student.uliege.be>
Date: Sat, 11 Apr 2020 18:03:03 +0200
Subject: [PATCH 2/2] All done except error management

---
 Makefile                               |  2 +-
 arch/x86/entry/syscalls/syscall_32.tbl |  3 +-
 hello/hello.h                          |  0
 include/linux/syscalls.h               |  1 +
 kvs/kvs.c                              | 91 ++++++++++++++++++++++++----------
 kvs/kvs.h                              |  8 +--
 6 files changed, 74 insertions(+), 31 deletions(-)
 create mode 100644 hello/hello.h

diff --git a/Makefile b/Makefile
index efe46e6..7c90ade 100644
--- a/Makefile
+++ b/Makefile
@@ -940,7 +940,7 @@ endif
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ kvs/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ kvs/ hello/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_32.tbl b/arch/x86/entry/syscalls/syscall_32.tbl
index 76dfc91..a11c7b45 100644
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@ -393,4 +393,5 @@
 384	i386	arch_prctl		sys_arch_prctl			compat_sys_arch_prctl
 385 i386    kvs_insert      kvs_insert
 386 i386    kvs_search      kvs_search
-387 i386    kvs_delete      kvs_delete
\ No newline at end of file
+387 i386    kvs_delete      kvs_delete
+388 i386    hello           sys_hello
\ No newline at end of file
diff --git a/hello/hello.h b/hello/hello.h
new file mode 100644
index 0000000..e69de29
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 319cf45..bb75d9b 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -944,4 +944,5 @@ asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,
 asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size_t vallen);
 asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen);
 asmlinkage long kvs_delete(const char *key, size_t keylen);
+asmlinkage long sys_hello(void);
 #endif
diff --git a/kvs/kvs.c b/kvs/kvs.c
index 4e5375d..b6593fd 100644
--- a/kvs/kvs.c
+++ b/kvs/kvs.c
@@ -1,45 +1,86 @@
 #include <linux/slab.h>
+#include <linux/kernel.h>
+#include <linux/string.h>
+
 #include "kvs.h"
 
 asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size_t vallen){
+    
+    // The key already exists in the KVS. We only update its field.
+
+    // Create a Node to iterate the linked list.
+    struct Node* datastruct = NULL;
+    // Iterate over all entries in the list.
+    list_for_each_entry(datastruct, &kvsHead, kvsList){
+        // Key already exists
+        if(strcmp(datastruct->key, key) == 0){
+            kfree(datastruct->val);
+            datastruct->val = (char*) kmalloc(vallen+1, GFP_KERNEL);
+
+            if(datastruct->val == NULL){
+                // Quoi faire ?
+                return -1;
+            }
+
+            strcpy(datastruct->val, val);
+            return 0;
+        }
+    }
+
+    // We have to create a new node
 
     struct Node* addition = (struct Node*) kmalloc(sizeof(struct Node),GFP_KERNEL);
-    addition->key = (char*) kmalloc(sizeof(key), GFP_KERNEL);
-    addition->val = (char*) kmalloc(sizeof(val), GFP_KERNEL);
+    addition->key = (char*) kmalloc(keylen+1, GFP_KERNEL); // Checker que keylen == len(key) ? 
+    addition->val = (char*) kmalloc(vallen+1, GFP_KERNEL);
 
-    addition->key = key;
-    addition->val = val;
+    if(addition == NULL || addition->key == NULL || addition->val == NULL){
+        printk("error in assignment");
+        return -1;
+    }
+
+    strcpy(addition->key, key);
+    strcpy(addition->val, val);
     addition->keylen = keylen;
     addition->vallen = vallen;
 
     INIT_LIST_HEAD(&addition->kvsList);
-
+    // Checker assignment correct pour kvslist ? 
     list_add(&addition->kvsList, &kvsHead);
-
-    struct list_head* pos = NULL;
-    struct Node* datastruct = NULL;
-    list_for_each(pos, &kvsHead){
-        datastruct = list_entry(pos, struct Node, kvsList);
-        printk("Key : %s\n", datastruct->key);
-    }
-    return 1;
+    return 0;
 }
 
 asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen) {
 
-    printk("kvs_search\n");
-    return 1;
+    // Create a Node to iterate the linked list.
+    struct Node* datastruct = NULL;
+    // Iterate over all entries in the list.
+    list_for_each_entry(datastruct, &kvsHead, kvsList){
+        // We have the key in KVS.
+        if(strcmp(datastruct->key, key)==0){
+            // The buffer is not big enough
+            if(strlen(datastruct->val)+1 > max_vallen){
+                // Quoi faire ? un goto pour afficher un msg d'erreur ?
+                return -1;
+            }
+            strncpy(val, datastruct->val, strlen(datastruct->val)+1);
+            return 1;
+        }
+    }
+    return 0;
 }
 
 asmlinkage long kvs_delete(const char *key, size_t keylen) {
 
-    printk("kvs_delete\n");
-    return 1;
-}
-
-/* Does not work.
-*   Function used to initialize the global variable representing the head of the linked list
-
-void __init kvs_init(void) {
-    LIST_HEAD(kvsHead);
-}*/
\ No newline at end of file
+    // Create a Node to iterate the linked list.
+    struct Node* datastruct = NULL;
+    // Iterate over all entries in the list.
+    list_for_each_entry(datastruct, &kvsHead, kvsList){
+        // We find the key
+        if(strcmp(datastruct->key, key)==0){
+            list_del(&datastruct->kvsList);
+            return 0;
+        }
+    }
+    // Add error management
+    return 0;
+}
\ No newline at end of file
diff --git a/kvs/kvs.h b/kvs/kvs.h
index 5237de2..79d401c 100644
--- a/kvs/kvs.h
+++ b/kvs/kvs.h
@@ -1,10 +1,10 @@
-#include <linux/list.h>
+#include <linux/list.h> 
 
 static LIST_HEAD(kvsHead);
 
 struct Node {
-    const char* key;
-    const char* val;
+    char* key;
+    char* val;
     size_t keylen;
     size_t vallen;
 
@@ -16,4 +16,4 @@ asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size
 
 asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen);
 
-asmlinkage long kvs_delete(const char *key, size_t keylen);
\ No newline at end of file
+asmlinkage long kvs_delete(const char *key, size_t keylen);
-- 
2.7.4

