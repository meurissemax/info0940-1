From 2a32589c81f6b0ecd820aeb5ba2d2bca567261c9 Mon Sep 17 00:00:00 2001
From: Valentin Vermeylen <valentin.vermeylen@student.uliege.be>
Date: Thu, 16 Apr 2020 19:43:32 +0200
Subject: [PATCH 1/2] Changes in the kernel to implement the KVS

Intermediate commit for debugging

Temporary commit to debug

Final version with strncpy
---
 Makefile                               |   2 +-
 arch/x86/entry/syscalls/syscall_32.tbl |   3 +
 include/linux/syscalls.h               |   4 +-
 kvs/Makefile                           |   1 +
 kvs/kvs.c                              | 148 +++++++++++++++++++++++++++++++++
 kvs/kvs.h                              |  19 +++++
 6 files changed, 175 insertions(+), 2 deletions(-)
 create mode 100644 kvs/Makefile
 create mode 100644 kvs/kvs.c
 create mode 100644 kvs/kvs.h

diff --git a/Makefile b/Makefile
index c8b8e90..efe46e6 100644
--- a/Makefile
+++ b/Makefile
@@ -940,7 +940,7 @@ endif
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ kvs/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_32.tbl b/arch/x86/entry/syscalls/syscall_32.tbl
index 448ac21..76dfc91 100644
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@ -391,3 +391,6 @@
 382	i386	pkey_free		sys_pkey_free
 383	i386	statx			sys_statx
 384	i386	arch_prctl		sys_arch_prctl			compat_sys_arch_prctl
+385 i386    kvs_insert      kvs_insert
+386 i386    kvs_search      kvs_search
+387 i386    kvs_delete      kvs_delete
\ No newline at end of file
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a78186d..007196c 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -940,5 +940,7 @@ asmlinkage long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
 asmlinkage long sys_pkey_free(int pkey);
 asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,
 			  unsigned mask, struct statx __user *buffer);
-
+asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size_t vallen);
+asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen);
+asmlinkage long kvs_delete(const char *key, size_t keylen);
 #endif
diff --git a/kvs/Makefile b/kvs/Makefile
new file mode 100644
index 0000000..a280249
--- /dev/null
+++ b/kvs/Makefile
@@ -0,0 +1 @@
+obj-y := kvs.o
\ No newline at end of file
diff --git a/kvs/kvs.c b/kvs/kvs.c
new file mode 100644
index 0000000..261fe46
--- /dev/null
+++ b/kvs/kvs.c
@@ -0,0 +1,148 @@
+#include <linux/slab.h>
+#include <linux/kernel.h>
+#include <linux/string.h>
+
+#include "kvs.h"
+
+asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size_t vallen){
+    
+    // 1. The key already exists in the KVS. We only update its field.
+
+    // Create a Node to iterate the linked list.
+    struct Node* datastruct = NULL;
+
+    // Iterate over all entries in the list.
+    list_for_each_entry(datastruct, &kvsHead, kvsList){
+        // Key may already exist
+        if(strncmp(datastruct->key, key, keylen) == 0){
+            // Only the prefix of datastruct->keylen matched, so no match for this entry
+            if(keylen != datastruct->keylen)
+                continue;
+
+            // Free the field and reallocate it at the right size
+            kfree(datastruct->val);
+            datastruct->val = (char*) kmalloc(vallen*sizeof(char), GFP_KERNEL);
+
+            // The allocation failed
+            if(!datastruct->val){
+                printk(KERN_ERR "Allocation of val failed.\n");
+                return -1;
+            }
+
+            // No error in allocation, copy vallen characters of val into the field
+            strncpy(datastruct->val, val, vallen);
+            return 0;
+        }
+    }
+
+    // 2. We have to create a new node
+
+    struct Node* addition = (struct Node*) kmalloc(sizeof(struct Node),GFP_KERNEL);
+
+    if(!addition){
+        printk(KERN_ERR "Unable to create the entry. Memory may be full.\n");
+        return -1;
+    }
+
+    addition->key = (char*) kmalloc(keylen*sizeof(char), GFP_KERNEL);
+
+    if(!addition->key){
+        printk(KERN_ERR "Unable to create the entry. The allocation for the key has not succeeded.\n");
+        kfree(addition);
+        return -1;
+    }
+
+    addition->val = (char*) kmalloc(vallen*sizeof(char), GFP_KERNEL);
+
+    if(!addition->val){
+        printk(KERN_ERR "Unable to create the entry. The allocation for the value has not succeeded.\n");
+        kfree(addition->key);
+        kfree(addition);
+        return -1;
+    }
+
+    // Copy the arguments in the fields.
+
+    addition->keylen = keylen;
+    addition->vallen = vallen;
+    strncpy(addition->val, val, vallen);
+    strncpy(addition->key, key, keylen);
+
+    INIT_LIST_HEAD(&addition->kvsList);
+
+    // Add the node in the linked list.
+    list_add(&addition->kvsList, &kvsHead);
+    
+    return 0;
+}
+
+
+asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen) {
+
+    if(!val){
+        printk("Search failed. The buffer 'val' was not allocated.\n");
+        return -1;
+    }
+    if(!key){
+        printk("Search failed. The key 'key' was not allocated.\n");
+        return -1;
+    }
+
+    // Create a Node to iterate the linked list.
+    struct Node* datastruct = NULL;
+    
+    // Iterate over all entries in the list.
+    list_for_each_entry(datastruct, &kvsHead, kvsList){
+        // We may have the key in KVS.
+        if(strncmp(datastruct->key, key, keylen)==0){
+            // Only the prefix of datastruct->keylen matched, so no match for this entry
+            if(keylen != datastruct->keylen)
+                continue;
+
+            // 1. Buffer large enough
+            if(max_vallen >= datastruct->vallen){
+                strncpy(val, datastruct->val, datastruct->vallen); 
+                return 1;
+            }
+            
+            // 2. The buffer is not large enough. We decided not to copy anything in it and return -1.
+            else{
+                printk(KERN_ERR "Key found but buffer not large enough to contain the value.\n");
+                return -1;
+            }
+        }
+    }
+    return 0;
+}
+
+asmlinkage long kvs_delete(const char *key, size_t keylen) {
+
+    // The pointer key is not allocated
+    if(! key){
+        printk(KERN_ERR "key pointer not allocated.\n");
+        return -1;
+    }
+
+    // Create a Node to iterate the linked list.
+    struct Node* datastruct = NULL;
+    // Iterate over all entries in the list.
+    list_for_each_entry(datastruct, &kvsHead, kvsList){
+        // We find the key
+        if(strncmp(datastruct->key, key, keylen)==0){
+            // Only the prefix of datastruct->keylen matched, so no match for this entry
+            if(keylen != datastruct->keylen)
+                continue;
+
+            // Update the linked list
+            list_del(&datastruct->kvsList);
+
+            // free the Node
+            kfree(datastruct->key);
+            kfree(datastruct->val);
+            kfree(datastruct);
+            return 0;
+        }
+    }
+    // No key found, still return 0
+    return 0;
+}
\ No newline at end of file
diff --git a/kvs/kvs.h b/kvs/kvs.h
new file mode 100644
index 0000000..79d401c
--- /dev/null
+++ b/kvs/kvs.h
@@ -0,0 +1,19 @@
+#include <linux/list.h> 
+
+static LIST_HEAD(kvsHead);
+
+struct Node {
+    char* key;
+    char* val;
+    size_t keylen;
+    size_t vallen;
+
+    struct list_head kvsList;
+};
+
+
+asmlinkage long kvs_insert(const char *key, size_t keylen, const char *val, size_t vallen);
+
+asmlinkage long kvs_search(const char *key, size_t keylen, char *val, size_t max_vallen);
+
+asmlinkage long kvs_delete(const char *key, size_t keylen);
-- 
2.7.4

